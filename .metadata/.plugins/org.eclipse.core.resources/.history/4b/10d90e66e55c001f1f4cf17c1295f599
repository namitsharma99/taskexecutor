package com.src.main;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import com.src.constant.Constants;
import com.src.ececute.TaskExecutorImpl;
import com.src.helper.TasksHelper;
import com.src.main.Main.Task;

public class Runner {

	/**
	 * To create a thread pool, it is recommended to determine the number of threads per below logic:
	 * If the thread operation is CPU intensive (like heavy computations) -
	 * 		thread count should be in sync with the number of CPU cores available
	 * If the thread operation is I/O intensive (like DB or URL calls) - 
	 * 		thread count should be high to avoid delay in picking up next set of tasks
	 * 
	 * For this practical demo, we are considering a small thread count = 5
	 * 
	 * */
	private static String taskNature  = Constants.DEFAULT;
	
	public static void main(String[] args) {

		int threadCount = getOptimumThreadCount(taskNature);

		ExecutorService service = Executors.newFixedThreadPool(threadCount);
		
		TaskExecutorImpl taskExecutorImpl = new TaskExecutorImpl(service);
		
		List<Task<Integer>> tasks = TasksHelper.getTasksForExecution();
		
		List<Future<Integer>> futureList = new ArrayList<Future<Integer>>();
		
		for (Task<Integer> task : tasks) {
			futureList.add(taskExecutorImpl.submitTask(task));
		}
		
		for (Future<Integer> future : futureList) {
			try {
				System.out.println("Response from Future: " + future.get());
			} catch (InterruptedException e) {
				e.printStackTrace();
			} catch (ExecutionException e) {
				e.printStackTrace();
			}
		}
		
		taskExecutorImpl.shutdown();
		
	}

	private static int getOptimumThreadCount(String task) {

		int threadCount;
		if (task.equals(Constants.CPU_INTENSIVE)) {
			threadCount = Runtime.getRuntime().availableProcessors();
		} else if (task.equals(Constants.IO_INTENSIVE)) {
			threadCount = 100;
		} else {
			threadCount = 5;
		}
		
		System.out.println("Thread count selected: " + threadCount);
		
		return threadCount;
	}

}
